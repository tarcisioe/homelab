#!/bin/bash

set -euo pipefail

BASE_DIR="$(dirname $(realpath "${0}"))"


function usage {
    echo "\
Usage: run [OPTION...] COMMAND
Execute commands for deploying the homelab.

Commands:
    homelab-terraform    Run terraform to create the containers.
    homelab-ansible      Run ansible on the containers created by terraform.
    homelab-destroy      Destroy the whole infrastructure.
    homelab-full         Run terraform followed by ansible.
    vpn-ansible          Run ansible to configure the VPN server.

Optional arguments:
    -y/--yes     Do not ask for interactive confirmation.
    -h/--help    Print this help message and exit."
}


function run-at (
    cd "${1}"
    $"${@:2}"
)


function error {
    echo "${@}" 1>&2
}


function die {
    error "${@}" | return 1
}


function run-terraform {
    local quiet_flag="${1}"
    local command="${2}"
    local var_file="${BASE_DIR}/private/server.tfvars"

    run-at terraform/server \
        terraform "${command}" ${quiet_flag} -var-file "${var_file}" "${@:3}"
}


function run-ansible {
    local playbook="${1}"
    local tf_generated="${BASE_DIR}/tf-generated"

    [[ -d "${tf_generated}" ]] ||
        die "No 'tf-generated' directory found. Run terraform first."

    ansible-playbook -i "${tf_generated}/ansible-services-inventory.ini" "${playbook}" "${@:2}"
}

function run-homelab-ansible {
    run-ansible "${BASE_DIR}/ansible/main.yml" "${@}"
}

function terraform-apply {
    local quiet_flag="${1}"

    run-terraform "${quiet_flag}" apply
}


function terraform-destroy {
    local quiet_flag="${1}"

    run-terraform "${quiet_flag}" destroy
}


function run-command {
    local quiet_flag="${1}"
    local command="${2}"

    case "${command}" in
        homelab-terraform)
            terraform-apply "${quiet_flag}" ;;
        homelab-ansible)
            run-homelab-ansible "${@:3}" ;;
        homelab-destroy)
            terraform-destroy "${quiet_flag}" ;;
        homelab-full)
            terraform-apply "${quiet_flag}" &&
            run-homelab-ansible
            ;;
        vpn-ansible)
            run-ansible "${BASE_DIR}/ansible/configure-vpn-server.yml" "${@:3}" ;;
        *)
            die "No command '${command}'."
            ;;
    esac
}

function source-if-exists {
    local file="${1}"
    [[ -f "${file}" ]] && source "${file}"
}

function main {
    source-if-exists "${BASE_DIR}/private/environment"

    local options
    options=$(getopt -o hy -l help,yes -- "${@}")
    eval set -- "$options"

    local quiet_flag=""

    while true; do
        case "${1}" in
            -h|--help)
                usage && return 0
                ;;
            -y|--yes)
                quiet_flag="-auto-approve"
                ;;
            --) shift ;&
            *) break ;;
        esac
        shift
    done

    local command="${1}"
    shift

    run-command "${quiet_flag}" "${command}" "${@}"
}


main "${@}"
